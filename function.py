import os
import json
import datetime

# Diret√≥rio para armazenar as sess√µes de conversa
diretorio = r"C:\tfs\chatbot-saude\venv\Conversas"
if not os.path.exists(diretorio):
    os.makedirs(diretorio)

# Contexto fixo do chatbot
contexto = """
Voc√™ √© um assistente especializado na √°rea de sa√∫de suplementar e regula√ß√£o de planos de sa√∫de. Seu objetivo √© fornecer informa√ß√µes detalhadas e corretas sobre coberturas, car√™ncias, rede credenciada, auditoria m√©dica e normas da ANS.
Caso o usu√°rio pergunte sobre:

Cobertura de procedimentos ‚Üí Consulte as normas da ANS e informe se o procedimento est√° no Rol de Procedimentos obrigat√≥rios.
Car√™ncia ‚Üí Explique os prazos m√°ximos permitidos pela ANS para cada tipo de atendimento.
Reembolso ‚Üí Informe sobre regras e prazos para solicita√ß√£o de reembolso de despesas m√©dicas.
Auditoria m√©dica ‚Üí Explique os crit√©rios utilizados para an√°lise de procedimentos e solicita√ß√µes m√©dicas.
TUSS e tabelas m√©dicas ‚Üí Oriente sobre como identificar c√≥digos e classifica√ß√µes de procedimentos m√©dicos.
Autoriza√ß√£o de exames e cirurgias ‚Üí Informe sobre prazos para autoriza√ß√£o e os direitos do benefici√°rio.

o valor do procedimento √© de R$ 100,00 e o prazo de entrega √© de 5 dias √∫teis.
o codigo e o 10101012 e a classifica√ß√£o √© de 1.
o prazo para autoriza√ß√£o √© de 10 dias √∫teis e o benefici√°rio tem direito a solicitar a autoriza√ß√£o.
"""

# Listar sess√µes dispon√≠veis
def listar_sessoes():
    arquivos = [f for f in os.listdir(diretorio) if f.endswith("_user.json")]
    return sorted(arquivos, reverse=True) if arquivos else []

# Escolher uma sess√£o ou criar uma nova
def escolher_sessao():
    sessoes = listar_sessoes()
    if sessoes:
        print("\nüìÇ Sess√µes anteriores dispon√≠veis:")
        for i, sessao in enumerate(sessoes):
            print(f"{i+1}. {sessao.replace('_user.json', '')}")
        escolha = input("\nDigite o n√∫mero da sess√£o para carregar ou pressione Enter para iniciar uma nova: ").strip()
        if escolha.isdigit():
            escolha = int(escolha) - 1
            if 0 <= escolha < len(sessoes):
                base_nome = sessoes[escolha].replace("_user.json", "")
                return os.path.join(diretorio, base_nome)
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    return os.path.join(diretorio, f"chat_{timestamp}")

# Carregar hist√≥rico do arquivo
def carregar_historico(base_nome):
    user_arquivo = base_nome + "_user.json"
    assistant_arquivo = base_nome + "_assistant.json"
    
    user_history = []
    assistant_history = []
    
    if os.path.exists(user_arquivo):
        with open(user_arquivo, "r", encoding="utf-8") as file:
            try:
                user_history = json.load(file)
            except json.JSONDecodeError:
                pass
    
    if os.path.exists(assistant_arquivo):
        with open(assistant_arquivo, "r", encoding="utf-8") as file:
            try:
                assistant_history = json.load(file)
            except json.JSONDecodeError:
                pass
    
    return user_history, assistant_history

# Salvar hist√≥rico nos arquivos
def salvar_historico(base_nome, user_history, assistant_history):
    with open(base_nome + "_user.json", "w", encoding="utf-8") as file:
        json.dump(user_history, file, ensure_ascii=False, indent=4)
    with open(base_nome + "_assistant.json", "w", encoding="utf-8") as file:
        json.dump(assistant_history, file, ensure_ascii=False, indent=4)

# Exibir hist√≥rico antes de iniciar o chatbot
def exibir_historico(user_history, assistant_history):
    print("\nüìú Hist√≥rico de Usu√°rio üìú")
    for msg in user_history:
        print(f"üë§ Voc√™: {msg}")
    
    print("\nü§ñ Respostas do Chatbot ü§ñ")
    for msg in assistant_history:
        print(f"ü§ñ Chatbot: {msg}")
    
    print("\nüîπ Iniciando nova sess√£o üîπ\n")

# Fun√ß√£o principal do chatbot
def chat(model):
    # Historico da sess√£o
    importar_historico = input("Deseja importar o hist√≥rico da sess√£o anterior? (s/n): ").strip().lower()
    
    # Carregar hist√≥rico das sess√µes anteriores
    if importar_historico != 's':
        user_history = []
        assistant_history = []
    else:
        base_nome = escolher_sessao()
        user_history, assistant_history = carregar_historico(base_nome)
        exibir_historico(user_history, assistant_history)

    # Iniciar chatbot com o contexto fixo
    print("Chatbot iniciado! Digite 'sair' para encerrar.")
    
    while True:
        user_input = input("Voc√™: ").strip()
        if user_input.lower() == "sair":
            print("Chatbot encerrado!")
            salvar_historico(base_nome, user_history, assistant_history)
            break
        try:
            # Incluir o contexto fixo nas entradas do usu√°rio
            full_input = contexto + "\nUsu√°rio: " + user_input
            user_history.append(user_input)
            
            # Gerar a resposta com o modelo
            response = model.generate_content(full_input)
            assistant_history.append(response.text)
            
            print("Chatbot:", response.text)
            salvar_historico(base_nome, user_history, assistant_history)
        except Exception as e:
            print("Ocorreu um erro:", str(e))
